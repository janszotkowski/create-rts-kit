name: Manual Release (template → npm)

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options: [patch, minor, major]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'

      - name: Configure git author
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Compute next version
        id: vcalc
        env:
          BUMP: ${{ github.event.inputs.bump }}
        run: |
          set -euo pipefail

          PKG_NAME=$(node -p "require('./template/package.json').name")
          PKG_VERSION=$(node -p "require('./template/package.json').version || '0.0.0'")
          echo "Package: $PKG_NAME"
          echo "template/package.json version: $PKG_VERSION"

          REGISTRY_VERSION=$(npm view "$PKG_NAME" version 2>/dev/null || echo '0.0.0')
          echo "npm registry version: $REGISTRY_VERSION"

          GIT_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)
          GIT_VERSION=${GIT_TAG#v}
          GIT_VERSION=${GIT_VERSION:-0.0.0}
          echo "highest git tag: ${GIT_TAG:-<none>} → $GIT_VERSION"

          BASE=$(node -e "const vs=['$REGISTRY_VERSION','$GIT_VERSION','$PKG_VERSION'];const s=v=>v.split('.').map(Number);vs.sort((a,b)=>{const A=s(a),B=s(b);for(let i=0;i<3;i++){if(A[i]>B[i])return -1;if(A[i]<B[i])return 1}return 0});console.log(vs[0])")
          echo "Base version: $BASE"

          NEXT=$(node -e "const [x,y,z]='$BASE'.split('.').map(Number);const t='${BUMP}';let a=x,b=y,c=z;if(t==='major'){a++;b=0;c=0}else if(t==='minor'){b++;c=0}else{c++}console.log([a,b,c].join('.'))")
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"
          echo "Next version: $NEXT"

      - name: Bump template/package.json and tag
        run: |
          NEXT='${{ steps.vcalc.outputs.next }}'

          (cd template && npm version "$NEXT" --no-git-tag-version)

          git add template/package.json
          git commit -m "chore(release): v${NEXT} [skip ci]" || echo "No changes to commit"

          if git rev-parse "v${NEXT}" >/dev/null 2>&1; then
            echo "Tag v${NEXT} už existuje. Ukončuji…"
            exit 1
          fi

          git tag "v${NEXT}"
          git push
          git push --tags

      - name: Install (only if needed)
        working-directory: template
        run: |
          if [ -f pnpm-lock.yaml ]; then
            corepack enable
            pnpm install --frozen-lockfile
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            echo "No lockfile found, skipping install."
          fi

      - name: Publish to npm
        working-directory: template
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
